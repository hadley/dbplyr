> lf <- lazy_frame(a = 1:3, b = 3:1)
> # head
> lf %>% head(1) %>% arrange(a)
<SQL>
SELECT *
FROM (SELECT *
FROM `df`
LIMIT 1) `dbplyr_001`
ORDER BY `a`

> lf %>% arrange(a) %>% head(1)
<SQL>
SELECT *
FROM `df`
ORDER BY `a`
LIMIT 1

> lf %>% arrange(a) %>% head(1) %>% arrange(b)
<SQL>
SELECT *
FROM (SELECT *
FROM `df`
ORDER BY `a`
LIMIT 1) `dbplyr_002`
ORDER BY `b`

> # mutate
> lf %>% mutate(a = b) %>% arrange(a)
<SQL>
SELECT `b` AS `a`, `b`
FROM `df`
ORDER BY `a`

> # complex mutate
> lf %>% arrange(a) %>% mutate(a = b) %>% arrange(a)
<SQL>

Warning: Overriding sort order.
Hint: Did you want to use `window_order()` instead of `arrange()`? See `?window_order` and `?arrange.tbl_lazy` for details.

SELECT `b` AS `a`, `b`
FROM `df`
ORDER BY `a`

> lf %>% arrange(a) %>% mutate(b = a) %>% arrange(b)
<SQL>

Warning: Overriding sort order.
Hint: Did you want to use `window_order()` instead of `arrange()`? See `?window_order` and `?arrange.tbl_lazy` for details.

SELECT `a`, `a` AS `b`
FROM `df`
ORDER BY `b`

> lf %>% mutate(a = -a) %>% arrange(a) %>% mutate(a = -a)
<SQL>

Warning: Ignoring sort order.
Hint: `arrange()` only has an effect if used at the end of a pipe or immediately before `head()`. See `?arrange.tbl_lazy` for details.

SELECT -`a` AS `a`, `b`
FROM (SELECT -`a` AS `a`, `b`
FROM `df`) `dbplyr_003`

