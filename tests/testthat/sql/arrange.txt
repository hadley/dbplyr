
arrange renders correctly
=========================

> lf <- lazy_frame(a = 1:3, b = 3:1)
> # basic
> lf %>% arrange(a)
<SQL>
SELECT *
FROM `df`
ORDER BY `a`

> # double arrange
> lf %>% arrange(a) %>% arrange(b)
<SQL>

Warning: Overriding sort order.
Hint: Did you want to use `window_order()` instead of `arrange()`? See `?window_order` and `?arrange.tbl_lazy` for details.

SELECT *
FROM `df`
ORDER BY `b`

> # remove ordered by
> lf %>% arrange(a) %>% select(-a)
<SQL>

Warning: Ignoring sort order.
Hint: `arrange()` only has an effect if used at the end of a pipe or after `head()`. See `?arrange.tbl_lazy` for details.

SELECT `b`
FROM `df`

> lf %>% arrange(a) %>% select(-a) %>% arrange(b)
<SQL>

Warning: Overriding sort order.
Hint: Did you want to use `window_order()` instead of `arrange()`? See `?window_order` and `?arrange.tbl_lazy` for details.

SELECT `b`
FROM `df`
ORDER BY `b`

> # un-arrange
> lf %>% arrange(a) %>% arrange()
<SQL>

Warning: Ignoring sort order.
Hint: `arrange()` only has an effect if used at the end of a pipe or after `head()`. See `?arrange.tbl_lazy` for details.

SELECT *
FROM `df`

> lf %>% arrange(a) %>% select(-a) %>% arrange()
<SQL>

Warning: Ignoring sort order.
Hint: `arrange()` only has an effect if used at the end of a pipe or after `head()`. See `?arrange.tbl_lazy` for details.

SELECT `b`
FROM `df`

> # use order
> lf %>% arrange(a) %>% select(-a) %>% mutate(c = lag(b))
<SQL>

Warning: Ignoring sort order.
Hint: `arrange()` only has an effect if used at the end of a pipe or after `head()`. See `?arrange.tbl_lazy` for details.

SELECT `b`, LAG(`b`, 1, NULL) OVER (ORDER BY `a`) AS `c`
FROM `df`

